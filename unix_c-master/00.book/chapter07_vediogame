第７章　事件驱动编程：编写一个视频游戏

有些程序的控制流很简单．而另外一些则要响应外部的事件．一个
视频游戏要响应时钟和用户输入，操作系统也要响应时钟和外设

curses库有一些可以管理屏幕显示字符的函数

一个进程通过设置计时器来安排事件．每个进程有三个独立的计时器．
计时器通过发送信号来通知进程．每个计时器都可以被设置为只发送
一次信号，或者按固定的间隙发送信号

处理一个信号很简单．同时处理多个信号就复杂了．进程能决定是忽略
信号还是阻塞信号．进程能告知内核哪些信号在什么时候阻塞或忽略

有些函数执行一些复杂的任务是不能被打断的．程序可以通过小心地
使用信号掩码来保护这些临界区代码

curses库基本函数:
initscr()   初始化curses库和tty
endwin()    关闭curses并重置tty
refresh()   使屏幕按照你的意图显示
move(r, c)  移动光标到屏幕的r c位置
addstr(s)   在当前位置画字符串s
mvaddch(r,c,'s')
clear()     清屏
standout()  启动standout模式(一般使屏幕反色)
standend()  关闭standout模式


调用pause 可以挂起进程直到有一个信号被处理

Unix很早就有sleep alarm，但他们的精度是秒，后来有了一个新的
系统，叫间隔计时器interval timer,有更高的精度 usleep(n)ｎ为微秒
三个计时器分别是：
真实 ITIMER_REAL 执行用户代码与内核代码所用时间
进程 ITIMER_VIRTUAL 用户态运行时间
实用 ITIMER_PROF 

虽然每个进程有三个独立的计时器，但其实每个系统只需要一个时钟来
设置节拍．每当内核收到系统时钟脉冲，他遍历所有的间隔计时器，
使每个计数器减去一个时钟单位，当某进程计数器为０，则内核发送SIGALRM
给此进程．

一段修改一个数据结构的代码如果在运行时被打断将导致数据得不完整或损毁，
则称这段代码为临界区，临界区需要保护，最简单办法就是阻塞或者忽略那些
处理函数将要使用或修改特定数据的信号．

kill向一个进程发送一个信号，两个进程用户ＩＤ必须一样，或者发送者是
超级用户
